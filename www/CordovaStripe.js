"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CordovaStripe = void 0;
var cordova_1 = require("cordova");
var execP = function (methodName, opts) {
    return new Promise(function (resolve, reject) {
        cordova_1.exec(resolve, reject, 'CordovaStripe', methodName, [opts]);
    });
};
var NOOP = function () {
};
var CordovaStripe;
(function (CordovaStripe) {
    var UIButtonType;
    (function (UIButtonType) {
        UIButtonType["SUBMIT"] = "submit";
        UIButtonType["CONTINUE"] = "continue";
        UIButtonType["NEXT"] = "next";
        UIButtonType["CANCEL"] = "cancel";
        UIButtonType["RESEND"] = "resend";
        UIButtonType["SELECT"] = "select";
    })(UIButtonType = CordovaStripe.UIButtonType || (CordovaStripe.UIButtonType = {}));
    var SourceType;
    (function (SourceType) {
        SourceType["ThreeDeeSecure"] = "3ds";
        SourceType["GiroPay"] = "giropay";
        SourceType["iDEAL"] = "ideal";
        SourceType["SEPADebit"] = "sepadebit";
        SourceType["Sofort"] = "sofort";
        SourceType["AliPay"] = "alipay";
        SourceType["AliPayReusable"] = "alipayreusable";
        SourceType["P24"] = "p24";
        SourceType["VisaCheckout"] = "visacheckout";
    })(SourceType = CordovaStripe.SourceType || (CordovaStripe.SourceType = {}));
    var CardBrand;
    (function (CardBrand) {
        CardBrand["AMERICAN_EXPRESS"] = "AMERICAN_EXPRESS";
        CardBrand["DISCOVER"] = "DISCOVER";
        CardBrand["JCB"] = "JCB";
        CardBrand["DINERS_CLUB"] = "DINERS_CLUB";
        CardBrand["VISA"] = "VISA";
        CardBrand["MASTERCARD"] = "MASTERCARD";
        CardBrand["UNIONPAY"] = "UNIONPAY";
        CardBrand["UNKNOWN"] = "UNKNOWN";
    })(CardBrand = CordovaStripe.CardBrand || (CordovaStripe.CardBrand = {}));
    var SourceTypeArray = Object.keys(SourceType).map(function (key) { return SourceType[key]; });
    var Plugin = /** @class */ (function () {
        function Plugin() {
        }
        Plugin.addCustomerSource = function (opts) {
            return execP('addCustomerSource', opts);
        };
        Plugin.cancelApplePay = function () {
            return execP('cancelApplePay');
        };
        Plugin.confirmPaymentIntent = function (opts) {
            return execP('confirmPaymentIntent', opts);
        };
        Plugin.confirmSetupIntent = function (opts) {
            return execP('confirmSetupIntent', opts);
        };
        Plugin.createAccountToken = function (account) {
            return execP('createAccountToken', account);
        };
        Plugin.createBankAccountToken = function (bankAccount) {
            return execP('createBankAccountToken', bankAccount);
        };
        Plugin.createCardToken = function (card) {
            return execP('createCardToken', card);
        };
        Plugin.createPiiToken = function (opts) {
            return execP('createPiiToken', opts);
        };
        Plugin.createSourceToken = function (opts) {
            return execP('createSourceToken', opts);
        };
        Plugin.customerPaymentMethods = function () {
            return execP('customerPaymentMethods');
        };
        Plugin.customizePaymentAuthUI = function (opts) {
            return execP('', opts);
        };
        Plugin.deleteCustomerSource = function (opts) {
            return execP('', opts);
        };
        Plugin.echo = function (options) {
            return execP('echo');
        };
        Plugin.finalizeApplePayTransaction = function (opts) {
            return execP('', opts);
        };
        Plugin.identifyCardBrand = function (opts) {
            return execP('identifyCardBrand', opts);
        };
        Plugin.initCustomerSession = function (opts) {
            return execP('initCustomerSession', opts);
        };
        Plugin.isApplePayAvailable = function () {
            return execP('isApplePayAvailable');
        };
        Plugin.isGooglePayAvailable = function () {
            return execP('isGooglePayAvailable');
        };
        Plugin.payWithApplePay = function (options) {
            return execP('payWithApplePay');
        };
        Plugin.setCustomerDefaultSource = function (opts) {
            return execP('setCustomerDefaultSource', opts);
        };
        Plugin.setPublishableKey = function (opts) {
            return execP('setPublishableKey', opts);
        };
        Plugin.startGooglePayTransaction = function () {
            return execP('startGooglePayTransaction');
        };
        Plugin.validateCVC = function (opts) {
            return execP('validateCVC', opts);
        };
        Plugin.validateCardNumber = function (opts) {
            return execP('validateCardNumber', opts);
        };
        Plugin.validateExpiryDate = function (opts) {
            return execP('validateExpiryDate', opts);
        };
        return Plugin;
    }());
    CordovaStripe.Plugin = Plugin;
})(CordovaStripe = exports.CordovaStripe || (exports.CordovaStripe = {}));
//# sourceMappingURL=data:application/json;base64,